package com.jayway.maven.plugins.android.phase05compile;

import com.jayway.maven.plugins.android.common.AetherHelper;
import org.apache.commons.io.IOUtils;
import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.DefaultArtifact;
import org.apache.maven.plugin.MojoExecutionException;
import org.codehaus.plexus.util.IOUtil;
import org.sonatype.aether.RepositorySystem;
import org.sonatype.aether.RepositorySystemSession;
import org.sonatype.aether.repository.RemoteRepository;

import java.io.*;
import java.util.Enumeration;
import java.util.List;
import java.util.Set;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/** Various helper methods for dealing with Android Native makefiles.
 * @author Johan Lindquist
 */
public class MakefileHelper {

    /** Creates an Android Makefile based on the specified set of static library dependency artifacts.
     *
     *
     *
     * @param outputDir Directory to resolve artifact locations relative to.  Makefiles contain relative paths
     * @param artifacts The list of (static library) dependency artifacts to create the Makefile from
     * @param useHeaderArchives
     * @param repoSession
     *@param projectRepos
     * @param repoSystem @return The created Makefile
     */
    public static String createMakefileFromArtifacts( File outputDir, Set<Artifact> artifacts, boolean useHeaderArchives, RepositorySystemSession repoSession, List<RemoteRepository> projectRepos, RepositorySystem repoSystem) throws MojoExecutionException {

        StringBuilder sb = new StringBuilder("# Generated by Android Maven Plugin\n");
        sb.append( "LOCAL_PATH := $(call my-dir)\n" );

        for ( Artifact artifact : artifacts ) {

            sb.append( "#\n" );
            sb.append( "# Group ID: " );
            sb.append( artifact.getGroupId() );
            sb.append( '\n' );
            sb.append( "# Artifact ID: " );
            sb.append( artifact.getArtifactId());
            sb.append( '\n' );
            sb.append( "# Version: " );
            sb.append( artifact.getVersion() );
            sb.append( '\n' );
            sb.append( "include $(CLEAR_VARS)" );
            sb.append( '\n' );
            sb.append( "LOCAL_MODULE    := " );
            sb.append( artifact.getArtifactId() );
            sb.append( '\n' );
            sb.append( "LOCAL_SRC_FILES := " );
            sb.append( resolveRelativePath( outputDir, artifact.getFile() ) );
            sb.append( '\n' );
            if (useHeaderArchives)
            {
                try {
                    Artifact harArtifact = new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getScope(), "har", null, artifact.getArtifactHandler() );
                    final Artifact resolvedHarArtifact = AetherHelper.resolveArtifact( harArtifact, repoSystem, repoSession, projectRepos );

                    File includeDir = new File( System.getProperty( "java.io.tmpdir" ), "android_maven_plugin_native_includes" + System.currentTimeMillis() + "_" + resolvedHarArtifact.getArtifactId());
                    includeDir.deleteOnExit();

                    unjar( new JarFile( resolvedHarArtifact.getFile() ), includeDir );

                    sb.append( "LOCAL_EXPORT_C_INCLUDES := " );
                    sb.append( resolveRelativePath( outputDir, includeDir ) );
                    sb.append( '\n' );

                }
                catch ( Exception e ) {
                    // FIXME: Should the build really fail if the dependency can not be found?
                    throw new MojoExecutionException( "Error while resolving header archieve file for: " + artifact.getArtifactId(),e );
                }
            }

            sb.append( "include $(PREBUILT_STATIC_LIBRARY)\n" );
        }
        return sb.toString();
    }

    private static void unjar( JarFile jarFile, File outputDirectory )
            throws IOException {
        for ( Enumeration en = jarFile.entries(); en.hasMoreElements(); ) {
            JarEntry entry = ( JarEntry ) en.nextElement();
            File entryFile = new File( outputDirectory, entry.getName() );
            if ( !entryFile.getParentFile().exists()
                    && !entry.getName().startsWith( "META-INF" ) ) {
                entryFile.getParentFile().mkdirs();
            }
            if ( !entry.isDirectory() && !entry.getName().startsWith( "META-INF" )) {
                final InputStream in = jarFile.getInputStream( entry );
                try {
                    final OutputStream out = new FileOutputStream( entryFile );
                    try {
                        IOUtil.copy( in, out );
                    }
                    finally {
                        IOUtils.closeQuietly( out );
                    }
                }
                finally {
                    IOUtils.closeQuietly( in );
                }
            }
        }
    }

    /** Resolves the relative path of the specified artifact
     *
     * @param outputDirectory
     * @param file
     * @return
     */
    private static String resolveRelativePath( File outputDirectory, File file ) {
        // FIXME: This should really examine the paths used and correct the directory accordingly
        return ".." + file.getAbsolutePath();
    }

    /** Creates a list of artifacts suitable for use in the LOCAL_STATIC_LIBRARIES variable in an Android makefile
     *
     * @param resolvedstaticLibraryArtifacts
     * @return
     */
    public static String createStaticLibraryList( Set<Artifact> resolvedstaticLibraryArtifacts ) {
        StringBuilder sb = new StringBuilder();
        for ( Artifact resolvedstaticLibraryArtifact : resolvedstaticLibraryArtifacts ) {
            sb.append( resolvedstaticLibraryArtifact.getArtifactId() );
            sb.append( " " );

        }
        return sb.toString();
    }
}
